{
  "command": "grep",
  "show_version": "grep -V | head -1 | awk '{print $NF}'",
  "supported_versions": [
    "3.7"
  ],
  "arguments": [
    {
      "keyword": "-V",
      "alias": "--version",
      "help": "Output the version number of grep and exit."
    },
    {
      "keyword": "-E",
      "alias": "--extended-regexp",
      "group": "matching",
      "help": "Interpret PATTERNS as extended regular expressions (EREs, see below)."
    },
    {
      "keyword": "-F",
      "alias": "--fixed-strings",
      "group": "matching",
      "help": "Interpret PATTERNS as fixed strings, not regular expressions."
    },
    {
      "keyword": "-P",
      "alias": "--perl-regexp",
      "group": "matching",
      "help": "Interpret I<PATTERNS> as Perl-compatible regular expressions (PCREs).  This option is experimental when combined with the -z (--null-data) option"
    },
    {
      "keyword": "-e",
      "alias": "--regexp",
      "variable": "PATTERNS",
      "seperator": "=",
      "help": "Use  PATTERNS  as the patterns. This option can be used to protect a patternbeginning with -"
    },
    {
      "keyword": "-f",
      "alias": "--file",
      "variable": "FILE",
      "type": "file",
      "seperator": "=",
      "help": "Obtain patterns from FILE, one per line."
    },
    {
      "keyword": "-i",
      "alias": "--ignore-case",
      "group": "matching",
      "help": "Ignore case distinctions in patterns and input data, so that characters that differ only in case match each other."
    },
    {
      "keyword": "-v",
      "alias": "--invert-match",
      "group": "matching",
      "help": "Invert the sense of matching, to select non-matching lines."
    },
    {
      "keyword": "-w",
      "alias": "--word-regexp",
      "group": "matching",
      "help": "Select only those lines containing matches that form whole words.\t The test is that the matching substring must either be at the beginning of the line, or preceded by  a\t non-word  constituentcharacter.   Similarly,  it  must\t be either at the end of the line or followed by a non-word constituent character.  Word-constituent characters are letters, digits, and the underscore.  Thisoption has no effect if -x is also specified."
    },
    {
      "keyword": "-x",
      "alias": "--line-regexp",
      "group": "matching",
      "help": "Select only those matches that exactly match the whole line.  For a regular expression pattern, this is like parenthesizing the pattern and then surrounding it with ^ and $."
    },
    {
      "keyword": "-c",
      "alias": "--count",
      "group": "output",
      "help": "Suppress normal output; instead print a count of matching lines for each input file.  With the -v, --invert-match option (see below), count non-matching lines."
    },
    {
      "keyword": "--color",
      "alias": "--colour",
      "variable": "WHEN",
      "separator": "=",
      "group": "output",
      "help": "Surround the matched (non-empty) strings, matching lines, context lines, file names, line numbers, byte offsets, and separators (for fields and groups of context lines) with  escape  sequencesto  display  them in color on the terminal.  The colors are defined by the environment variable GREP_COLORS.  The deprecated environment variable GREP_COLOR is still supported, but its settingdoes not have priority.  WHEN is never, always, or auto."
    },
    {
      "keyword": "-L",
      "alias": "--files-without-match",
      "group": "output",
      "help": "Suppress normal output; instead print the name of each input file from which no output would normally have been printed."
    },
    {
      "keyword": "-l",
      "alias": "--files-with-matches",
      "group": "output",
      "help": "Suppress normal output; instead print the name of each input file from which output would normally have been printed.  Scanning each input file stops upon first match."
    },
    {
      "keyword": "-m",
      "alias": "--max-count",
      "variable": "NUM",
      "seperator": "=",
      "help": "Stop reading a file after NUM matching lines."
    },
    {
      "keyword": "-o",
      "alias": "--only-matching",
      "group": "output",
      "help": "Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line."
    },
    {
      "keyword": "-s",
      "alias": "--no-messages",
      "group": "output",
      "help": "Suppress error messages about nonexistent or unreadable files."
    },
    {
      "keyword": "-b",
      "alias": "--byte-offset",
      "group": "output",
      "help": "Print the 0-based byte offset within the input file before each line of output.  If -o (--only-matching) is specified, print the offset of the matching part itself."
    },
    {
      "keyword": "-H",
      "alias": "--with-filename",
      "group": "output",
      "help": "Print the file name for each match.  This is the default when there is more than one file to search.  This is a GNU extension."
    },
    {
      "keyword": "-h",
      "alias": "--no-filename",
      "group": "output",
      "help": "Suppress the prefixing of file names on output.  This is the default when there is only one file (or only standard input) to search."
    },
    {
      "keyword": "--label",
      "variable": "LABEL",
      "seperator": "=",
      "group": "output",
      "help": "Display  input  actually coming from standard input as input coming from file LABEL.  This can be useful for commands that transform a file's contents before searching, e.g., gzip -cd foo.gz |grep --label=foo -H 'some pattern'.  See also the -H option."
    },
    {
      "keyword": "-n",
      "alias": "--line-number",
      "group": "output",
      "help": "Prefix each line of output with the 1-based line number within its input file."
    },
    {
      "keyword": "-T",
      "alias": "--initial-tab",
      "group": "output",
      "help": "Make sure that the first character of actual line content lies on a tab stop, so that the alignment of tabs looks normal."
    },
    {
      "keyword": "-Z",
      "alias": "--null",
      "group": "output",
      "help": "Output a zero byte (the ASCII NUL character) instead of the character that normally follows a file name.\tFor example, grep -lZ outputs a zero byte after each file name instead\tof  the\t usualnewline.\t This  option  makes the output unambiguous, even in the presence of file names containing unusual characters like newlines.  This option can be used with commands like find -print0,perl -0, sort -z, and xargs -0 to process arbitrary file names, even those that contain newline characters."
    },
    {
      "keyword": "-A",
      "alias": "--after-context",
      "variable": "NUM",
      "seperator": "=",
      "group": "output",
      "help": "Print NUM lines of trailing context after matching lines.\t Places a line containing a group separator (--) between contiguous groups of matches.\tWith the -o or\t--only-matching\t option,  thishas no effect and a warning is given."
    },
    {
      "keyword": "-B",
      "alias": "--before-context",
      "variable": "NUM",
      "seperator": "=",
      "group": "output",
      "help": "Print  NUM  lines\t of leading context before matching lines.  Places a line containing a group separator (--) between contiguous groups of matches.  With the -o or --only-matching option, this has no effect and a warning is given."
    },
    {
      "keyword": "--group-separator",
      "variable": "SEP",
      "seperator": "=",
            "group": "output",

      "help": "When -A, -B, or -C are in use, print SEP instead of -- between groups of lines."
    },
    {
      "keyword": "--no-group-separator",
      "help": "When -A, -B, or -C are in use, do not print a separator between groups of lines."
    },
    {
      "keyword": "-a",
      "alias": "--text",
      "help": "Process a binary file as if it were text; this is equivalent to the --binary-files=text option."
    },
    {
      "keyword": "--binary-files",
      "variable": "TYPE",
      "seperator": "=",
      "help": "If a file's data or metadata indicate that the file contains binary data, assume that the file is of type TYPE.  Non-text bytes indicate binary data; these are either output bytes that are improperly encoded for the current locale, or null input bytes when the -z option is not given."
    },
    {
      "keyword": "-D",
      "alias": "--devices",
      "variable": "ACTION",
      "seperator": "=",
      "help": "If  an input file is a device, FIFO or socket, use ACTION to process it."
    },
    {
      "keyword": "-d",
      "alias": "--directories",
      "variable": "ACTION",
      "seperator": "=",
      "help": "If an input file is a directory, use ACTION to process it. "
    },
    {
      "keyword": "--exclude",
      "variable": "GLOB",
      "seperator": "=",
      "group": "files",
      "help": "Skip  any command-line  file with a name suffix that matches the pattern GLOB, using wildcard matching; a name suffix is either the whole name, or a trailing part that starts with a non-slashcharacter immediately after a slash (/) in the name.  When searching recursively, skip any subfile whose base name matches GLOB; the base name is the part after the last slash.\tA pattern  canuse *, ?, and [...] as wildcards, and \\ to quote a wildcard or backslash character literally."
    },
    {
      "keyword": "--exclude-from",
      "variable": "FILE",
      "type": "file",
      "seperator": "=",
      "group": "files",
      "help": "Skip files whose base name matches any of the file-name globs read from FILE (using wildcard matching as described under --exclude)."
    },
    {
      "keyword": "--exclude-dir",
      "variable": "GLOB",
      "seperator": "=",
      "group": "files",
      "help": "Skip  any\t command-line  directory  with\ta  name\t suffix\t that matches the pattern GLOB.\t When searching recursively, skip any subdirectory whose base name matches GLOB.  Ignore any redundanttrailing slashes in GLOB."
    },
    {
      "keyword": "-I",
      "help": "Process a binary file as if it did not contain matching data; this is equivalent to the --binary-files=without-match option."
    },
    {
      "keyword": "--include",
      "variable": "GLOB",
      "seperator": "=",
      "group": "files",
      "help": "Search only files whose base name matches GLOB (using wildcard matching as described under --exclude).  If contradictory --include and --exclude options are given, the last matching one\t wins.If no --include or --exclude options match, a file is included unless the first such option is --include."
    },
    {
      "keyword": "-r",
      "alias": "--recursive",
      "group": "files",
      "help": "Read all files under each directory, recursively, following symbolic links only if they are on the command line.\tNote that if no file operand is given, B<grep> searches the working directory.This is equivalent to the -d recurse option."
    },
    {
      "keyword": "-R",
      "alias": "--dereference-recursive",
      "group": "files",
      "help": "Read all files under each directory, recursively. Follow all symbolic links, unlike -r."
    },
    {
      "keyword": "--line-buffered",
      "group": "output",
      "help": "Use line buffering on output.  This can cause a performance penalty."
    },
    {
      "keyword": "-U",
      "alias": "--binary",
      "help": "Treat the file(s) as binary."
    },
    {
      "keyword": "-z",
      "alias": "--null-data",
      "help": "Treat input and output data as sequences of lines, each terminated by a zero byte (the ASCII NUL character) instead of a newline. Like the -Z or --null option, this option can be used with commands like sort -z to process arbitrary file names."
    },
    {
      "variable": "PATTERNS",
      "help": "Use PATTERNS as the patterns.",
      "display_order": 1
    },
    {
      "variable": "FILE",
      "type": "file",
      "help": "Search patterns in this FILE.",
      "display_order": 2
    }
  ]
}